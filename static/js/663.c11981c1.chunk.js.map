{"version":3,"file":"static/js/663.c11981c1.chunk.js","mappings":"4SAEaA,EAAWC,EAAAA,EAAAA,GAAH,wKAMRC,EAAYD,EAAAA,EAAAA,GAAH,6IAKTE,EAAaF,EAAAA,EAAAA,IAAH,gHAOVG,EAAYH,EAAAA,EAAAA,EAAH,6K,SCbTI,EAAO,WAChB,IAAOC,GAAMC,EAAAA,EAAAA,MAAND,GACP,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAwBA,IAtBAC,EAAAA,EAAAA,YAAU,WAAM,wCAKZ,2FACED,GAAa,GADf,mBAG2BE,EAAAA,EAAAA,GAAc,CAAEC,OAAO,UAAD,OAAYC,OAAOV,GAAnB,cAHjD,OAGUW,EAHV,OAIIC,QAAQC,IAAIF,EAASR,MAErBC,GAAQ,SAAAU,GAAI,OAAIH,EAASR,IAAb,IANhB,gDAQIS,QAAQC,IAAR,MARJ,yBAUIP,GAAa,GAVjB,6EALY,sBACH,KAALN,GADQ,mCAmBZe,EACD,GAAE,CAACf,IAEFG,EAAKa,OAAS,EACd,OAAO,gCACEX,IAAa,SAAC,KAAD,CACVY,OAAO,KACPC,MAAM,KACNC,MAAM,MACNC,UAAU,oBACVC,OAAO,IACPC,aAAa,SACbC,SAAS,KAGb,SAAC7B,EAAD,UACKS,EAAKqB,KAAI,WAAuBC,GAAvB,IAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,aAAR,OAA+B,SAACC,EAAD,CAAiBF,KAAMA,EAAMC,aAAcA,GAA/BF,EAA3C,QAI7B,EAEKG,EAAO,SAAC,GAAwB,IAAvBF,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,aACXE,EAAYF,EAAY,yCAAqCA,GAAiBG,EAEpF,OAAO,UAAClC,EAAD,YACK,SAACC,EAAD,CAAYkC,IAAKF,EAAWG,IAAKN,EAAMR,MAAM,MAAMD,OAAO,MAAMgB,QAAQ,UACxE,SAACnC,EAAD,UAAY4B,MAE3B,C,kGC1DYlB,EAAa,mCAAG,WAAM0B,GAAN,mGACV,+BACD,mCAGdzB,EAMEyB,EANFzB,OALyB,EAWvByB,EALFC,SAAAA,OANyB,MAMd,GANc,IAWvBD,EAJFE,KAAAA,OAPyB,MAOlB,eAPkB,IAWvBF,EAHFG,UAAAA,OARyB,MAQb,6BARa,IAWvBH,EAFFI,OAAAA,OATyB,MAShB,gBATgB,IAWvBJ,EADFK,KAAAA,OAVyB,MAUlB,EAVkB,EAarBC,EAbqB,UACV,gCADU,OAaD/B,EAbC,oBAEX,oCAFW,OAa2B0B,GAb3B,OAasCC,GAbtC,OAa6CC,GAb7C,OAayDC,EAbzD,iBAawEC,EAbxE,iCAcdE,EAAAA,EAAAA,IAAUD,GAAKE,MAAK,SAAAC,GAC/B,OAAOA,EAASC,IACjB,IAhB0B,mFAAH,qD","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.js","themoviedbApi.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CastList = styled.ul`\n    display: grid;\n    max-width: calc(100vw - 30px);\n    grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));\n    grid-gap: 10px;\n`\nexport const ActorCard = styled.li`\n    padding: 5px;\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 13px 27px -5px, rgba(0, 0, 0, 0.3) 0px 8px 16px -8px;\n`\n\nexport const ActorPhoto = styled.img`\n    margin-bottom: 10px;\n    width: 100%;\n    height: 150px;\n    object-fit: cover;\n`\n\nexport const ActorName = styled.p`\n    text-align: center;\n    font-weight: 500;\n    font-size: 12px;\n\n    @media screen and (min-width: 320px) {\n        font-size: 16px;\n    }\n`","import { useParams } from \"react-router-dom\";\nimport { useEffect, useState } from 'react';\nimport { TailSpin } from  'react-loader-spinner'\nimport { themoviedbApi } from 'themoviedbApi';\nimport defImageActor from \"../../images/defImageActor.JPG\"\nimport { CastList, ActorCard, ActorPhoto, ActorName} from \"./Cast.styled\"\n\nexport const Cast = () => {\n    const {id} = useParams()\n    const [cast, setCast] = useState([])  \n    const [isLoading, setIsLoading] = useState(false)  \n\n    useEffect(() => {\n        if (id===''){\n          return\n        }\n  \n        async function fetchFilms(){\n          setIsLoading(true)\n          try {\n            const castFilm = await themoviedbApi({ option: `/movie/${Number(id)}/credits` });\n            console.log(castFilm.cast)\n  \n            setCast(prev => castFilm.cast)      \n          } catch (error) {\n            console.log(error);\n          } finally {\n            setIsLoading(false)\n          }\n        }\n       \n        fetchFilms()\n      }, [id]);\n\n    if (cast.length > 0){\n        return <>\n                {isLoading && <TailSpin\n                    height=\"80\"\n                    width=\"80\"\n                    color=\"red\"\n                    ariaLabel=\"tail-spin-loading\"\n                    radius=\"1\"\n                    wrapperClass=\"loader\"\n                    visible={true}\n                  />}\n\n                <CastList>\n                    {cast.map(({name, profile_path}, idx) => <Actor key={idx} name={name} profile_path={profile_path}/>)}\n                </CastList>\n              </>\n    }    \n}\n\nconst Actor =({name, profile_path})=>{\n    const imageLink = profile_path ? `https://image.tmdb.org/t/p/w500${profile_path}` : defImageActor\n\n    return <ActorCard>\n                <ActorPhoto src={imageLink} alt={name} width=\"100\" height=\"200\" loading=\"lazy\"/>               \n                <ActorName>{name}</ActorName>\n          </ActorCard>\n}","import axios from 'axios';\n\nexport const themoviedbApi = async valueObj => {\n  const BASE_URL = 'https://api.themoviedb.org/3';\n  const API_KEY = '2e329d861e790504d655e6d7175d4c52';\n\n  const {\n    option,\n    nameFilm = '',\n    lang = '&language=en',\n    imageLang = '&include_image_language=en',\n    region = '&region=en-US',\n    page = 1,\n  } = valueObj;\n\n  const url = `${BASE_URL}${option}?api_key=${API_KEY}${nameFilm}${lang}${imageLang}${region}&page=${page}&include_adult=false`;\n  return await axios.get(url).then(response => {\n    return response.data;\n  });\n};\n"],"names":["CastList","styled","ActorCard","ActorPhoto","ActorName","Cast","id","useParams","useState","cast","setCast","isLoading","setIsLoading","useEffect","themoviedbApi","option","Number","castFilm","console","log","prev","fetchFilms","length","height","width","color","ariaLabel","radius","wrapperClass","visible","map","idx","name","profile_path","Actor","imageLink","defImageActor","src","alt","loading","valueObj","nameFilm","lang","imageLang","region","page","url","axios","then","response","data"],"sourceRoot":""}